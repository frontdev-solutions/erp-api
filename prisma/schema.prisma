generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @unique @default(uuid())
  firstName     String?
  lastName      String?
  sureName      String
  phoneNumber   String
  password      String
  email         String          @unique
  address       String?
  birthDate     String?
  birthPlace    String?
  gender        Gender?
  joinAt        DateTime?
  roleId        String?
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  userImage     String?
  active        Boolean         @default(true)
  orders        Order[]
  role          Role?           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  visitOnClient VisitOnClient[]
}

model Role {
  id        String           @unique @default(uuid())
  code      String           @unique
  name      String           @unique
  updatedAt DateTime         @updatedAt
  createdAt DateTime         @default(now())
  active    Boolean          @default(true)
  accesses  AccessesOnRole[]
  users     User[]
}

model Access {
  id          String           @unique @default(uuid())
  name        String
  description String?
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
  action      AccessAction
  resource    String
  roles       AccessesOnRole[]
}

model AccessesOnRole {
  id         String   @unique @default(uuid())
  accessId   String
  accessName String
  roleId     String
  roleName   String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  access     Access   @relation(fields: [accessId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Warehouse {
  id        String    @unique @default(uuid())
  name      String
  code      String    @unique
  updateAt  DateTime  @updatedAt
  createdAt DateTime  @default(now())
  address   String
  products  Product[]
}

model Product {
  id             String           @unique @default(uuid())
  name           String
  code           String           @unique
  qty            Int
  price          Float
  updateAt       DateTime         @updatedAt
  createdAt      DateTime         @default(now())
  categoryId     String
  warehouseId    String?
  productSku     String
  smallestUnitId String
  orderItems     OrderItem[]
  smallestUnit   Unit             @relation(fields: [smallestUnitId], references: [id], onDelete: Cascade)
  warehouse      Warehouse?       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  unitConversion UnitConversion[]
}

model Category {
  id        String    @unique @default(uuid())
  name      String
  code      String    @unique
  product   Product[]
  updateAt  DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model Unit {
  id              String           @id @default(uuid())
  code            String           @unique
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  products        Product[]
  fromConversions UnitConversion[] @relation("FromUnit")
  toConversions   UnitConversion[] @relation("ToUnit")
}

model UnitConversion {
  id         String   @id @default(uuid())
  fromUnitId String
  toUnitId   String
  factor     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isManual   Boolean  @default(false)
  productId  String?
  fromUnit   Unit     @relation("FromUnit", fields: [fromUnitId], references: [id])
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  toUnit     Unit     @relation("ToUnit", fields: [toUnitId], references: [id])
}

model Client {
  id            String          @unique @default(uuid())
  name          String
  location      String
  updateAt      DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  orders        Order[]
  visitOnClient VisitOnClient[]
}

model Order {
  id          String      @unique @default(uuid())
  clientId    String
  salesId     String
  totalAmount Float
  description String
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  sales       User        @relation(fields: [salesId], references: [id], onDelete: Cascade)
  items       OrderItem[]
}

model OrderItem {
  id        String   @unique @default(uuid())
  orderId   String
  productId String
  qty       Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model VisitOnClient {
  id         String   @unique @default(uuid())
  userId     String
  clientId   String
  userImage  String
  latitude   Float
  longtitude Float
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AccessAction {
  CREATE
  READ
  UPDATE
  DELETE
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
}
