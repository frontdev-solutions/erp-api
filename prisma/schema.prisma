generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessAction {
  CREATE
  READ
  UPDATE
  DELETE
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String          @unique @default(uuid())
  name          String
  phoneNumber   String
  password      String
  email         String          @unique
  roleId        String?
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  userImage     String?
  visitOnClient VisitOnClient[]
  orders        Order[]
  active        Boolean         @default(true)
  role          Role?           @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Role {
  id          String           @unique @default(uuid())
  name        String           @unique
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
  active      Boolean          @default(true)
  displayName String           @unique
  accesses    AccessesOnRole[]
  users       User[]
}

model Access {
  id          String           @unique @default(uuid())
  name        String
  description String?
  resource    String
  action      AccessAction
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
  roles       AccessesOnRole[]
}

model AccessesOnRole {
  id         String   @unique @default(uuid())
  accessId   String
  accessName String
  roleId     String
  roleName   String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  access     Access   @relation(fields: [accessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Warehouse {
  id        String    @unique @default(uuid())
  name      String
  location  String
  products  Product[]
  updateAt  DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model Product {
  id          String      @unique @default(uuid())
  name        String
  qty         Int
  price       Float
  unitId      String
  unit        Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  warehouseId String?
  warehouse   Warehouse?  @relation(fields: [warehouseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems  OrderItem[]
  updateAt    DateTime    @updatedAt
  createdAt   DateTime    @default(now())
}

model Unit {
  id          String    @unique @default(uuid())
  name        String
  displayName String
  updateAt    DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  products    Product[]
}

model Client {
  id            String          @unique @default(uuid())
  name          String
  location      String
  visitOnClient VisitOnClient[]
  orders        Order[]
  updateAt      DateTime        @updatedAt
  createdAt     DateTime        @default(now())
}

model Order {
  id          String      @unique @default(uuid())
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  salesId     String
  sales       User        @relation(fields: [salesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  totalAmount Float
  description String
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id        String   @unique @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  qty       Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VisitOnClient {
  id         String   @unique @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userImage  String
  latitude   Float
  longtitude Float
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}
